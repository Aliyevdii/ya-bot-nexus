import os, logging, asyncio
from telethon import Button
from telethon import TelegramClient, events
from telethon.tl.types import ChannelParticipantAdmin
from telethon.tl.types import ChannelParticipantCreator
from telethon.tl.functions.channels import GetParticipantRequest
from telethon.errors import UserNotParticipantError

logging.basicConfig(
    level=logging.INFO,
    format='%(name)s - [%(levelname)s] - %(message)s'
)
LOGGER = logging.getLogger(__name__)

api_id = int(os.environ.get("APP_ID"))
api_hash = os.environ.get("API_HASH")
bot_token = os.environ.get("TOKEN")
client = TelegramClient('client', api_id, api_hash).start(bot_token=bot_token)
spam_chats = []

@client.on(events.NewMessage(pattern="^/start$"))
async def start(event):
  await event.reply(
    "__**MÉ™n Nexus Tagger Bot**am, qrup vÉ™ ya kanalda demÉ™k olar ki, bÃ¼tÃ¼n Ã¼zvlÉ™ri qeyd edÉ™ bilÉ™rÉ™m ðŸ‘»\nCilck **/yardÄ±m** Daha É™traflÄ± mÉ™lumat Ã¼Ã§Ã¼n",
    link_preview=False,
    buttons=(
      [
        Button.url('ðŸ“£ Gurup', 'https://t.me/iron_Blood_Gurup'),
        Button.url('ðŸ“¦ Support', 'https://t.me/NEXUS_MMC')
      ]
    )
  )

@client.on(events.NewMessage(pattern="^/yardÄ±m$"))
async def help(event):
  helptext = "**Nexus Tagger Bot-un YardÄ±m Menyusu**\n\nÉ™mr: /tag\n_BaÅŸqalarÄ±nÄ± qeyd etmÉ™k istÉ™diyiniz mÉ™tnlÉ™ bu É™mrdÉ™n istifadÉ™ edÉ™ bilÉ™rsiniz.__\n`Misal: /tag SabahÄ±nÄ±z Xeyir!`\n_Bu É™mri istÉ™nilÉ™n mesaja cavab olaraq verÉ™ bilÉ™rsiniz. Bot istifadÉ™Ã§ilÉ™ri hÉ™min cavab mesajÄ±na iÅŸarÉ™lÉ™yÉ™cÉ™k."
  await event.reply(
    helptext,
    link_preview=False,
    buttons=(
      [
        Button.url('ðŸ“£ Gurup', 'https://t.me/iron_Blood_Gurup'),
        Button.url('ðŸ“¦ Support', 'https://t.me/NEXUS_MMC')
      ]
    )
  )
  
@client.on(events.NewMessage(pattern="^/tag ?(.*)"))
async def mentionall(event):
  chat_id = event.chat_id
  if event.is_private:
    return await event.respond("_ Bu É™mr qruplarda vÉ™ kanallarda istifadÉ™ edilÉ™ bilÉ™r!__")
  
  is_admin = False
  try:
    partici_ = await client(GetParticipantRequest(
      event.chat_id,
      event.sender_id
    ))
  except UserNotParticipantError:
    is_admin = False
  else:
    if (
      isinstance(
        partici_.participant,
        (
          ChannelParticipantAdmin,
          ChannelParticipantCreator
        )
      )
    ):
      is_admin = True
  if not is_admin:
    return await event.respond("__YalnÄ±z adminlÉ™r hamÄ±sÄ±nÄ± qeyd edÉ™ bilÉ™r!__")
  
  if event.pattern_match.group(1) and event.is_reply:
    return await event.respond("__MÉ™nÉ™ bir arqument verin!__")
  elif event.pattern_match.group(1):
    mode = "text_on_cmd"
    msg = event.pattern_match.group(1)
  elif event.is_reply:
    mode = "text_on_reply"
    msg = await event.get_reply_message()
    if msg == None:
        return await event.respond("__KÃ¶hnÉ™ mesajlar Ã¼Ã§Ã¼n Ã¼zvlÉ™ri qeyd edÉ™ bilmÉ™rÉ™m! (qrupa É™lavÉ™ edilmÉ™zdÉ™n É™vvÉ™l gÃ¶ndÉ™rilÉ™n mesajlar)__")
  else:
    return await event.respond("__MesajÄ± cavablandÄ±rÄ±n vÉ™ ya baÅŸqalarÄ±nÄ± qeyd etmÉ™k Ã¼Ã§Ã¼n mÉ™nÉ™ mÉ™tn yazÄ±n!__")
  
  spam_chats.append(chat_id)
  usrnum = 0
  usrtxt = ''
  async for usr in client.iter_participants(chat_id):
    if not chat_id in spam_chats:
      break
    usrnum += 1
    usrtxt += f"[{usr.first_name}](tg://user?id={usr.id}) "
    if usrnum == 5:
      if mode == "text_on_cmd":
        txt = f"{usrtxt}\n\n{msg}"
        await client.send_message(chat_id, txt)
      elif mode == "text_on_reply":
        await msg.reply(usrtxt)
      await asyncio.sleep(2)
      usrnum = 0
      usrtxt = ''
  try:
    spam_chats.remove(chat_id)
  except:
    pass

@client.on(events.NewMessage(pattern="^/dur$"))
async def cancel_spam(event):
  if not event.chat_id in spam_chats:
    return await event.respond('_ HeÃ§ bir proses yoxdur...__')
  else:
    try:
      spam_chats.remove(event.chat_id)
    except:
      pass
    return await event.respond('__DayandÄ±ðŸ¤“.__')

print(">> BOT STARTED <<")
client.run_until_disconnected()
